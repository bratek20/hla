// DO NOT EDIT! Autogenerated by HLA tool

package com.some.pkg.somemodule.web

import com.github.bratek20.architecture.serialization.api.Serializer
import com.github.bratek20.architecture.serialization.api.Struct
import com.github.bratek20.architecture.serialization.context.SerializationFactory

import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

import com.some.pkg.somemodule.api.*

@RestController
@RequestMapping("/someInterface")
class SomeInterfaceController(
    private val api: SomeInterface,
) {
    private val serializer: Serializer = SerializationFactory.createSerializer()

    @PostMapping("/someEmptyMethod")
    fun someEmptyMethod(): Unit {
        api.someEmptyMethod()
    }

    @PostMapping("/someCommand")
    fun someCommand(@RequestBody request: SomeInterfaceSomeCommandRequest): Unit {
        api.someCommand(request.id, request.amount)
    }

    @PostMapping("/someQuery")
    fun someQuery(@RequestBody rawRequest: Struct): Struct {
        val request = serializer.fromStruct(rawRequest, SomeInterfaceSomeQueryRequest::class.java)
        return serializer.asStruct(SomeInterfaceSomeQueryResponse(api.someQuery(request.id)))
    }

    @PostMapping("/optMethod")
    fun optMethod(@RequestBody request: SomeInterfaceOptMethodRequest): SomeInterfaceOptMethodResponse {
        return SomeInterfaceOptMethodResponse(api.optMethod(request.optId))
    }
}

@RestController
@RequestMapping("/someInterface2")
class SomeInterface2Controller(
    private val api: SomeInterface2,
) {
    private val serializer: Serializer = SerializationFactory.createSerializer()

    @PostMapping("/referenceOtherClass")
    fun referenceOtherClass(@RequestBody request: SomeInterface2ReferenceOtherClassRequest): SomeInterface2ReferenceOtherClassResponse {
        return SomeInterface2ReferenceOtherClassResponse(api.referenceOtherClass(request.other))
    }

    @PostMapping("/referenceLegacyType")
    fun referenceLegacyType(@RequestBody request: SomeInterface2ReferenceLegacyTypeRequest): SomeInterface2ReferenceLegacyTypeResponse {
        return SomeInterface2ReferenceLegacyTypeResponse(api.referenceLegacyType(request.legacyType))
    }
}

