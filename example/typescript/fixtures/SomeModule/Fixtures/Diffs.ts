// DO NOT EDIT! Autogenerated by HLA tool

namespace SomeModule {
    export function diffSomeId(given: SomeId, expected: string, path: string = ""): string {
        if (given.value != expected) { return `${path}value ${given.value} != ${expected}` }
        return ""
    }

    export interface ExpectedDateRangeWrapper {
        range?: TypesModule.ExpectedDateRange,
    }
    export function diffDateRangeWrapper(given: DateRangeWrapper, expected: ExpectedDateRangeWrapper, path: string = ""): string {
        const result: string[] = []

        if (expected.range !== undefined) {
            if (TypesModule.diffDateRange(SomeModule.CustomTypesMapper.dateRangeWrapperGetRange(given), expected.range) != "") { result.push(TypesModule.diffDateRange(SomeModule.CustomTypesMapper.dateRangeWrapperGetRange(given), expected.range, `${path}range.`)) }
        }

        return result.join("\n")
    }

    export interface ExpectedSomeProperty {
        other?: OtherModule.ExpectedOtherProperty,
    }
    export function diffSomeProperty(given: SomeProperty, expected: ExpectedSomeProperty, path: string = ""): string {
        const result: string[] = []

        if (expected.other !== undefined) {
            if (OtherModule.diffOtherProperty(given.other, expected.other) != "") { result.push(OtherModule.diffOtherProperty(given.other, expected.other, `${path}other.`)) }
        }

        return result.join("\n")
    }

    export interface ExpectedSomeProperty2 {
        value?: string,
        custom?: any,
        customOpt?: any,
    }
    export function diffSomeProperty2(given: SomeProperty2, expected: ExpectedSomeProperty2, path: string = ""): string {
        const result: string[] = []

        if (expected.value !== undefined) {
            if (given.value != expected.value) { result.push(`${path}value ${given.value} != ${expected.value}`) }
        }

        if (expected.custom !== undefined) {
            if (given.custom != expected.custom) { result.push(`${path}custom ${given.custom} != ${expected.custom}`) }
        }

        if (expected.customOpt !== undefined) {
            if (given.customOpt.get() != expected.customOpt) { result.push(`${path}customOpt ${given.customOpt.get()} != ${expected.customOpt}`) }
        }

        return result.join("\n")
    }

    export interface ExpectedSomeClass {
        id?: string,
        amount?: number,
    }
    export function diffSomeClass(given: SomeClass, expected: ExpectedSomeClass, path: string = ""): string {
        const result: string[] = []

        if (expected.id !== undefined) {
            if (diffSomeId(given.id, expected.id) != "") { result.push(diffSomeId(given.id, expected.id, `${path}id.`)) }
        }

        if (expected.amount !== undefined) {
            if (given.amount != expected.amount) { result.push(`${path}amount ${given.amount} != ${expected.amount}`) }
        }

        return result.join("\n")
    }

    export interface ExpectedSomeClass2 {
        id?: string,
        names?: string[],
        ids?: string[],
        enabled?: boolean,
    }
    export function diffSomeClass2(given: SomeClass2, expected: ExpectedSomeClass2, path: string = ""): string {
        const result: string[] = []

        if (expected.id !== undefined) {
            if (diffSomeId(given.id, expected.id) != "") { result.push(diffSomeId(given.id, expected.id, `${path}id.`)) }
        }

        if (expected.names !== undefined) {
            if (given.names.length != expected.names.length) { result.push(`${path}names size ${given.names.length} != ${expected.names.length}`) }
            given.names.forEach((entry, idx) => { if (entry != expected.names[idx]) { result.push(`${path}names[${idx}] ${entry} != ${expected.names[idx]}`) } })
        }

        if (expected.ids !== undefined) {
            if (given.ids.length != expected.ids.length) { result.push(`${path}ids size ${given.ids.length} != ${expected.ids.length}`) }
            given.ids.forEach((entry, idx) => { if (diffSomeId(entry, expected.ids[idx]) != "") { result.push(diffSomeId(entry, expected.ids[idx], `${path}ids[${idx}].`)) } })
        }

        if (expected.enabled !== undefined) {
            if (given.enabled != expected.enabled) { result.push(`${path}enabled ${given.enabled} != ${expected.enabled}`) }
        }

        return result.join("\n")
    }

    export interface ExpectedSomeClass3 {
        class2Object?: ExpectedSomeClass2,
        someEnum?: SomeEnum,
        class2List?: ExpectedSomeClass2[],
    }
    export function diffSomeClass3(given: SomeClass3, expected: ExpectedSomeClass3, path: string = ""): string {
        const result: string[] = []

        if (expected.class2Object !== undefined) {
            if (diffSomeClass2(given.class2Object, expected.class2Object) != "") { result.push(diffSomeClass2(given.class2Object, expected.class2Object, `${path}class2Object.`)) }
        }

        if (expected.someEnum !== undefined) {
            if (given.someEnum != expected.someEnum) { result.push(`${path}someEnum ${given.someEnum} != ${expected.someEnum}`) }
        }

        if (expected.class2List !== undefined) {
            if (given.class2List.length != expected.class2List.length) { result.push(`${path}class2List size ${given.class2List.length} != ${expected.class2List.length}`) }
            given.class2List.forEach((entry, idx) => { if (diffSomeClass2(entry, expected.class2List[idx]) != "") { result.push(diffSomeClass2(entry, expected.class2List[idx], `${path}class2List[${idx}].`)) } })
        }

        return result.join("\n")
    }

    export interface ExpectedSomeClass4 {
        otherId?: number,
        otherClass?: OtherModule.ExpectedOtherClass,
        otherIdList?: number[],
        otherClassList?: OtherModule.ExpectedOtherClass[],
    }
    export function diffSomeClass4(given: SomeClass4, expected: ExpectedSomeClass4, path: string = ""): string {
        const result: string[] = []

        if (expected.otherId !== undefined) {
            if (OtherModule.diffOtherId(given.otherId, expected.otherId) != "") { result.push(OtherModule.diffOtherId(given.otherId, expected.otherId, `${path}otherId.`)) }
        }

        if (expected.otherClass !== undefined) {
            if (OtherModule.diffOtherClass(given.otherClass, expected.otherClass) != "") { result.push(OtherModule.diffOtherClass(given.otherClass, expected.otherClass, `${path}otherClass.`)) }
        }

        if (expected.otherIdList !== undefined) {
            if (given.otherIdList.length != expected.otherIdList.length) { result.push(`${path}otherIdList size ${given.otherIdList.length} != ${expected.otherIdList.length}`) }
            given.otherIdList.forEach((entry, idx) => { if (OtherModule.diffOtherId(entry, expected.otherIdList[idx]) != "") { result.push(OtherModule.diffOtherId(entry, expected.otherIdList[idx], `${path}otherIdList[${idx}].`)) } })
        }

        if (expected.otherClassList !== undefined) {
            if (given.otherClassList.length != expected.otherClassList.length) { result.push(`${path}otherClassList size ${given.otherClassList.length} != ${expected.otherClassList.length}`) }
            given.otherClassList.forEach((entry, idx) => { if (OtherModule.diffOtherClass(entry, expected.otherClassList[idx]) != "") { result.push(OtherModule.diffOtherClass(entry, expected.otherClassList[idx], `${path}otherClassList[${idx}].`)) } })
        }

        return result.join("\n")
    }

    export interface ExpectedSomeClass5 {
        date?: string,
        dateRange?: TypesModule.ExpectedDateRange,
        dateRangeWrapper?: ExpectedDateRangeWrapper,
        someProperty?: ExpectedSomeProperty,
        otherProperty?: OtherModule.ExpectedOtherProperty,
    }
    export function diffSomeClass5(given: SomeClass5, expected: ExpectedSomeClass5, path: string = ""): string {
        const result: string[] = []

        if (expected.date !== undefined) {
            if (TypesModule.diffDate(given.date, expected.date) != "") { result.push(TypesModule.diffDate(given.date, expected.date, `${path}date.`)) }
        }

        if (expected.dateRange !== undefined) {
            if (TypesModule.diffDateRange(given.dateRange, expected.dateRange) != "") { result.push(TypesModule.diffDateRange(given.dateRange, expected.dateRange, `${path}dateRange.`)) }
        }

        if (expected.dateRangeWrapper !== undefined) {
            if (diffDateRangeWrapper(given.dateRangeWrapper, expected.dateRangeWrapper) != "") { result.push(diffDateRangeWrapper(given.dateRangeWrapper, expected.dateRangeWrapper, `${path}dateRangeWrapper.`)) }
        }

        if (expected.someProperty !== undefined) {
            if (diffSomeProperty(given.someProperty, expected.someProperty) != "") { result.push(diffSomeProperty(given.someProperty, expected.someProperty, `${path}someProperty.`)) }
        }

        if (expected.otherProperty !== undefined) {
            if (OtherModule.diffOtherProperty(given.otherProperty, expected.otherProperty) != "") { result.push(OtherModule.diffOtherProperty(given.otherProperty, expected.otherProperty, `${path}otherProperty.`)) }
        }

        return result.join("\n")
    }

    export interface ExpectedSomeClass6 {
        someClassOpt?: ExpectedSomeClass,
        optString?: string,
        sameClassList?: ExpectedSomeClass6[],
    }
    export function diffSomeClass6(given: SomeClass6, expected: ExpectedSomeClass6, path: string = ""): string {
        const result: string[] = []

        if (expected.someClassOpt !== undefined) {
            if (diffSomeClass(given.someClassOpt.get(), expected.someClassOpt) != "") { result.push(diffSomeClass(given.someClassOpt.get(), expected.someClassOpt, `${path}someClassOpt.`)) }
        }

        if (expected.optString !== undefined) {
            if (given.optString.get() != expected.optString) { result.push(`${path}optString ${given.optString.get()} != ${expected.optString}`) }
        }

        if (expected.sameClassList !== undefined) {
            if (given.sameClassList.length != expected.sameClassList.length) { result.push(`${path}sameClassList size ${given.sameClassList.length} != ${expected.sameClassList.length}`) }
            given.sameClassList.forEach((entry, idx) => { if (diffSomeClass6(entry, expected.sameClassList[idx]) != "") { result.push(diffSomeClass6(entry, expected.sameClassList[idx], `${path}sameClassList[${idx}].`)) } })
        }

        return result.join("\n")
    }
}