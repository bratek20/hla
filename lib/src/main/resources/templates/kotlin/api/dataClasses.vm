package ${packageName}.api
#if($imports.size() > 0)

#foreach($import in $imports)
import ${import}.api.*
#end#end

#foreach($vo in $dataClasses)
data class ${vo.name()}(
    #foreach($field in $vo.fields)
    ${field.classDeclaration()},
    #end
) {
    #foreach($getter in $vo.getters())
    fun ${getter.name}(): ${getter.type.name()} {
        return ${getter.type.deserialize("this.${getter.field}")}
    }

    #end
    #foreach($setter in $vo.setters())
    fun ${setter.name}(${setter.field}: ${setter.type.name()}) {
        this.${setter.field} = ${setter.type.serialize("${setter.field}")}
    }

    #end
    companion object {
        fun create(
        #foreach($field in $vo.fields)
            $field.createDeclaration(),
        #end
        ): ${vo.name()} {
            return ${vo.name()}(
            #foreach($field in $vo.fields)
                ${field.createConstructorPass()},
            #end
            )
        }
    }
}#if($foreach.hasNext)


#end#end