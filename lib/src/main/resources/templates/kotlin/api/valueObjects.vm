package ${packageName}.api
#if($imports.size() > 0)

#foreach($import in $imports)
import ${import}.api.*
#end#end

#foreach($vo in $simpleValueObjects)
data class ${vo.name()}(
    val value: ${vo.serializableName()}
)#if($foreach.hasNext || $complexValueObjects.size() > 0)


#end#end
#foreach($vo in $complexValueObjects)
data class ${vo.name()}(
    #foreach($field in $vo.fields)
    ${field.accessor()}val $field.name: $field.type.serializableName(),
    #end
) {
    #foreach($getter in $vo.getters())
    fun ${getter.name}(): ${getter.type.name()} {
        return ${getter.type.deserialize("this.${getter.field}")}
    }

    #end
    companion object {
        fun create(
        #foreach($field in $vo.fields)
            $field.declaration(),
        #end
        ): ${vo.name()} {
            return ${vo.name()}(
            #foreach($field in $vo.fields)
                ${field.name} = ${field.type.serialize(${field.name})},
            #end
            )
        }
    }
}#if($foreach.hasNext)


#end#end