package ${packageName}.web
#if($imports.size() > 0)

#foreach($import in $imports)
import ${import}.api.*
import ${import}.web.*
#end
#end

import ${packageName}.api.*
#foreach($d in $dtos)

data class ${d.name()}(
    #foreach($field in $d.fields)
    val $field.name: $field.dtoType.name(),
    #end
) {
    fun toApi(): ${d.api.name()} {
        return ${d.api.constructorName()}(
            #foreach($field in $d.fields)
            $field.name = $field.toApi($field.name),
            #end
        )
    }

    companion object {
        fun fromApi(api: ${d.api.name()}): ${d.name()} {
            return ${d.name()}(
                #foreach($field in $d.fields)
                $field.name = $field.fromApi("api"),
                #end
            )
        }
    }
}#if($foreach.hasNext)

#end#end