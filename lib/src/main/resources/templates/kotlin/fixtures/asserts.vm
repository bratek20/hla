package ${packageName}.fixtures

import org.assertj.core.api.Assertions.assertThat
#if($imports.size() > 0)

#foreach($import in $imports)
import ${import}.api.*
import ${import}.fixtures.*
#end#end

import ${packageName}.api.*
#foreach($a in $simpleAsserts)

fun ${a.funName()}(given: ${a.api.name()}, expected: ${a.api.serializableName()}) {
    $a.assertion("given", "expected")
}
#if($foreach.hasNext)

#end#end
#foreach($a in $complexAsserts)

data class ${a.expectedName()}(
    #foreach($field in $a.fields)
    var $field.name(): $field.typeName()? = null,
    #end
)
fun ${a.funName()}(given: ${a.givenName()}, expectedInit: ${a.expectedName()}.() -> Unit) {
    val expected = ${a.expectedName()}().apply(expectedInit)

    #foreach($field in $a.fields)
    expected.${field.name()}?.let {
        $field.assertion("given", "it")
    }
        #if($foreach.hasNext)

        #end
    #end
}#if($foreach.hasNext)

#end#end