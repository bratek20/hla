#foreach($p in $dataClasses)
class ${p.name()} {
    #foreach($field in $p.fields)
    ${field.classDeclaration()}
    #end

    static create(
        #foreach($field in $p.fields)
        $field.createDeclaration(),
        #end
    ): ${p.name()} {
        const instance = new ${p.name()}()
        #foreach($field in $p.fields)
        $field.createConstructorPass()
        #end
        return instance
    }
    #foreach($getter in $p.getters())

    ${getter.name}(): ${getter.type.name()} {
        return ${getter.type.deserialize("this.${getter.field}")}
    }
    #end
    #foreach($setter in $p.setters())

    ${setter.name}(${setter.field}: ${setter.type.name()}): void {
        this.${setter.field} = ${setter.type.serialize(${setter.field})}
    }
    #end
}#if($foreach.hasNext)


#end#end