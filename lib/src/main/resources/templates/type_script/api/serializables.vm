#foreach($p in $serializables)
class ${p.name()} {
    #foreach($field in $p.fields)
    $field.accessor()$field.name = $oc.map($field.type.serializableName())
    #end

    static create(
        #foreach($field in $p.fields)
        $field.name: $field.type.serializableName(),
        #end
    ): ${p.name()} {
        const instance = new ${p.name()}()
        #foreach($field in $p.fields)
        instance.$field.name = $field.name
        #end
        return instance
    }
    #foreach($getter in $p.getters())

    ${getter.name}(): ${getter.type.name()} {
        return ${getter.type.deserialize("this.${getter.field}")}
    }
    #end
    #foreach($setter in $p.setters())

    ${setter.name}(${setter.field}: ${setter.type.name()}): void {
        this.${setter.field} = ${setter.type.unbox(${setter.field})}
    }
    #end
}#if($foreach.hasNext)

#end#end
#if($keys.size() > 0)


namespace $moduleName {
    #foreach($k in $keys)
    export const $k.constantName = new ${k.outerKeyType}(
        "${k.keyName}",
        ${k.keyType}
    )
    #if($foreach.hasNext)

    #end#end
}#end