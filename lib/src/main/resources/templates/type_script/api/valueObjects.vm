#foreach($nt in $simpleValueObjects)
class ${nt.name()} {
    constructor(
        public readonly value: ${nt.boxedType.name()}
    ) {}

    equals(other: ${nt.name()}): boolean {
        return this.value === other.value
    }

    toString(): string {
        return this.value.toString()
    }
}#if($foreach.hasNext)


#end#end
#foreach($p in $complexValueObjects)
class ${p.name()} {
    #foreach($field in $p.fields)
        $field.accessor()$field.name$oc.adjustAssignment($field.type.serializableName()) = $oc.map($field.type.serializableName())
    #end

static create(
    #foreach($field in $p.fields)
        $field.declaration(),
    #end
): ${p.name()} {
const instance = new ${p.name()}()
    #foreach($field in $p.fields)
    instance.$field.name = $field.type.serialize($field.name)
    #end
return instance
}
    #foreach($getter in $p.getters())

        ${getter.name}(): ${getter.type.name()} {
    return ${getter.type.deserialize("this.${getter.field}")}
    }
    #end
    #foreach($setter in $p.setters())

        ${setter.name}(${setter.field}: ${setter.type.name()}): void {
    this.${setter.field} = ${setter.type.serialize(${setter.field})}
    }
    #end
}#if($foreach.hasNext)


#end#end