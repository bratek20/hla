namespace $moduleName {
    #foreach($key in $keys)
    export const $key.name = new PropertyKey("$key.value")
    #end

    #foreach($vo in $valueObjects)
    export class ${vo.name} {
        #foreach($field in $vo.fields)
        $field.accessor$field.name = $oc.map($field.type.unboxedName())
        #end

        static create(
            #foreach($field in $vo.fields)
            $field.name: $field.type.unboxedName(),
            #end
        ): ${vo.name} {
            const instance = new ${vo.name}()
            #foreach($field in $vo.fields)
            instance.$field.name = $field.name
            #end
            return instance
        }

        #foreach($getter in $vo.getters)
        ${getter.name}(): ${getter.type.name()} {
            return ${getter.type.constructor("this.${getter.field}")}
        }
        #end
    }
    #if($foreach.hasNext)

    #end#end
}