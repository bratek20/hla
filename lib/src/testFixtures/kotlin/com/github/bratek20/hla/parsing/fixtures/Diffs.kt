// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.parsing.fixtures

import com.github.bratek20.hla.definitions.api.*
import com.github.bratek20.hla.definitions.fixtures.*
import com.github.bratek20.hla.directory.api.*
import com.github.bratek20.hla.directory.fixtures.*
import com.github.bratek20.hla.facade.api.*
import com.github.bratek20.hla.facade.fixtures.*

import com.github.bratek20.hla.parsing.api.*

data class ExpectedPartialHlaProfile(
    var name: String? = null,
    var imports: List<(ExpectedHlaProfileImport.() -> Unit)>? = null,
)
fun diffPartialHlaProfile(given: PartialHlaProfile, expectedInit: ExpectedPartialHlaProfile.() -> Unit, path: String = ""): String {
    val expected = ExpectedPartialHlaProfile().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.name?.let {
        if (diffProfileName(given.getName(), it) != "") { result.add(diffProfileName(given.getName(), it, "${path}name.")) }
    }

    expected.imports?.let {
        if (given.getImports().size != it.size) { result.add("${path}imports size ${given.getImports().size} != ${it.size}") }
        given.getImports().forEachIndexed { idx, entry -> if (diffHlaProfileImport(entry, it[idx]) != "") { result.add(diffHlaProfileImport(entry, it[idx], "${path}imports[${idx}].")) } }
    }

    return result.joinToString("\n")
}