// DO NOT EDIT! Autogenerated by HLA tool

package pl.bratek20.hla.facade.fixtures

import pl.bratek20.hla.directory.api.*
import pl.bratek20.hla.directory.fixtures.*

import pl.bratek20.hla.facade.api.*

data class TypeScriptInfoDef(
    var mainTsconfigPath: String = "someValue",
    var testTsconfigPath: String = "someValue",
    var launchPath: String = "someValue",
    var packagePath: String = "someValue",
)
fun typeScriptInfo(init: TypeScriptInfoDef.() -> Unit = {}): TypeScriptInfo {
    val def = TypeScriptInfoDef().apply(init)
    return TypeScriptInfo.create(
        mainTsconfigPath = pathCreate(def.mainTsconfigPath),
        testTsconfigPath = pathCreate(def.testTsconfigPath),
        launchPath = pathCreate(def.launchPath),
        packagePath = pathCreate(def.packagePath),
    )
}

data class HlaProfileDef(
    var name: String = "someValue",
    var language: ModuleLanguage = ModuleLanguage.KOTLIN,
    var projectPath: String = "someValue",
    var mainPath: String = "someValue",
    var fixturesPath: String = "someValue",
    var testsPath: String = "someValue",
    var onlyParts: List<String> = emptyList(),
    var generateWeb: Boolean = false,
    var typeScript: (TypeScriptInfoDef.() -> Unit)? = null,
)
fun hlaProfile(init: HlaProfileDef.() -> Unit = {}): HlaProfile {
    val def = HlaProfileDef().apply(init)
    return HlaProfile.create(
        name = ProfileName(def.name),
        language = def.language,
        projectPath = pathCreate(def.projectPath),
        mainPath = pathCreate(def.mainPath),
        fixturesPath = pathCreate(def.fixturesPath),
        testsPath = pathCreate(def.testsPath),
        onlyParts = def.onlyParts,
        generateWeb = def.generateWeb,
        typeScript = def.typeScript?.let { it -> typeScriptInfo(it) },
    )
}

data class ModuleOperationArgsDef(
    var hlaFolderPath: String = "someValue",
    var profileName: String = "someValue",
    var moduleName: String = "someValue",
)
fun moduleOperationArgs(init: ModuleOperationArgsDef.() -> Unit = {}): ModuleOperationArgs {
    val def = ModuleOperationArgsDef().apply(init)
    return ModuleOperationArgs(
        hlaFolderPath = pathCreate(def.hlaFolderPath),
        profileName = ProfileName(def.profileName),
        moduleName = ModuleName(def.moduleName),
    )
}

data class AllModulesOperationArgsDef(
    var hlaFolderPath: String = "someValue",
    var profileName: String = "someValue",
)
fun allModulesOperationArgs(init: AllModulesOperationArgsDef.() -> Unit = {}): AllModulesOperationArgs {
    val def = AllModulesOperationArgsDef().apply(init)
    return AllModulesOperationArgs(
        hlaFolderPath = pathCreate(def.hlaFolderPath),
        profileName = ProfileName(def.profileName),
    )
}