// DO NOT EDIT! Autogenerated by HLA tool

package pl.bratek20.hla.writing.fixtures

import pl.bratek20.hla.directory.api.*
import pl.bratek20.hla.directory.fixtures.*
import pl.bratek20.hla.facade.api.*
import pl.bratek20.hla.facade.fixtures.*
import pl.bratek20.hla.generation.api.*
import pl.bratek20.hla.generation.fixtures.*

import pl.bratek20.hla.writing.api.*

data class ExpectedWriteArgs(
    var hlaFolderPath: String? = null,
    var generateResult: (ExpectedGenerateResult.() -> Unit)? = null,
    var profile: (ExpectedHlaProfile.() -> Unit)? = null,
    var onlyUpdate: Boolean? = null,
)
fun diffWriteArgs(given: WriteArgs, expectedInit: ExpectedWriteArgs.() -> Unit, path: String = ""): String {
    val expected = ExpectedWriteArgs().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.hlaFolderPath?.let {
        if (diffPath(given.hlaFolderPath, it) != "") { result.add(diffPath(given.hlaFolderPath, it, "${path}hlaFolderPath.")) }
    }

    expected.generateResult?.let {
        if (diffGenerateResult(given.generateResult, it) != "") { result.add(diffGenerateResult(given.generateResult, it, "${path}generateResult.")) }
    }

    expected.profile?.let {
        if (diffHlaProfile(given.profile, it) != "") { result.add(diffHlaProfile(given.profile, it, "${path}profile.")) }
    }

    expected.onlyUpdate?.let {
        if (given.onlyUpdate != it) { result.add("${path}onlyUpdate ${given.onlyUpdate} != ${it}") }
    }

    return result.joinToString("\n")
}