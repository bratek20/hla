package ${packageName}.fixtures

import ${packageName}.api.*

#foreach($b in $builders)
data class ${b.defName}(
    #foreach($field in $b.fields)
    var $field.name: $field.type = $field.defaultValue,
    #end
)
fun ${b.funName}(init: ${b.defName}.() -> Unit = {}): ${b.voName} {
    val def = ${b.defName}().apply(init)
    return ${b.voName}(
    #foreach($field in $b.fields)
        #if($field.isSimpleVO() && $field.isList())
        ${field.name} = def.${field.name}.map { ${field.simpleVOName}(it) },
        #else
            #set($prefix = "")
            #if($field.isSimpleVO())
                #set($prefix = $field.simpleVOName + "(")
            #end
            #set($suffix = "")
            #if($field.isSimpleVO())
                #set($suffix = ")")
            #end
        $field.name = ${prefix}def.${field.name}${suffix},
        #end
    #end
    )
}
#if($foreach.hasNext)

#end
#end