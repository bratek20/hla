namespace ${moduleName}.Builder {
#foreach($b in $builders)
    export interface ${b.defName} {
        #foreach($field in $b.fields)
        $field.name?: $field.type,
        #end
    }
    export function ${b.funName}(def?: ${b.defName}): ${b.voName} {
        return new ${b.voName}(
        #foreach($field in $b.fields)
            #if($field.isSimpleVO() && $field.isList())
            (def?.${field.name} ?? $field.defaultValue).map(it => new ${field.simpleVOName}(it)),
            #else
                #set($prefix = "")
                #if($field.isSimpleVO())
                    #set($prefix = "new " + $field.simpleVOName + "(")
                #end
                #set($suffix = "")
                #if($field.isSimpleVO())
                    #set($suffix = ")")
                #end
            ${prefix}def?.${field.name} ?? $field.defaultValue${suffix},
            #end
        #end
        )
    }
    #if($foreach.hasNext)

    #end
#end
}